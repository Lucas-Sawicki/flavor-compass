Co trzeba zrobić (technicznie)

[#12] Efekt końcowy projektu ma być dostępny na GitHub, a Twoje repozytorium ma być publiczne. Chcemy mieć pełny wgląd do kodu źródłowego, żeby móc go przeczytać i ocenić. Dodaj również plik README.md,
    w którym zawrzesz informacje o Twoim projekcie.
[#20] Zabezpiecz swoją aplikację przed nieautoryzowanym dostępem. Jeżeli chodzi o zarządzanie użytkownikami (tworzenie, usuwanie, odzyskiwanie hasła), tutaj zostawiamy Ci pole do popisu.
    Pamiętaj, że jak dodasz do projektu security, to będziesz musiał/musiała jakoś ograć w testach warstwę security. Masz tutaj wolną rękę.
[#20] Napisz testy jednostkowe (Mockito), @DataJpaTest, @WebMvcTest oraz @SpringBootTest. Zapewnij pokrycie kodu testami na poziomie 80%.
[#21] Napisz testy RestAssured tak, żeby pokryć przypadek każdej z wymienionych metod HTTP w Twoim REST API.
[#21] Postaraj się wykorzystać jakieś zewnętrzne API, które skonsumujesz w swojej aplikacji. Napisałem "postaraj",
    bo nie w każdej z proponowanych domen biznesowych będzie można łatwo znaleźć w Internecie REST API do skonsumowania, a tym bardziej API wystawiające kontrakt OpenAPI.
    Jeżeli uda Ci się znaleźć takie REST API to super, wtedy możesz je skonsumować. Jeżeli nie, to zostaje jeszcze taka opcja, że możesz napisać obok drugą mini aplikację,
    która wystawi Ci kontrakt OpenApi, który będzie wykorzystany tylko na Twoje potrzeby, żeby podłączyć się do jakiegoś API. Oczywiście taki mini serwer będzie wystawiał jakieś mockowe dane.
    Podpowiemy, że istnieją rozwiązania takie jak np. JSON Server, który służy do wystawienia mini serwera mockującego REST API. Wtedy pozostaje kwestia pokombinowania z wystawieniem kontraktu.
    Rozwiąż ten problem, jak uważasz, my tu nic nie narzucamy, byle zobaczyć u Ciebie w projekcie jak konsumujesz jakieś obce REST API. Liczymy na Twoją inwencję w tym zakresie.
[#21] Wiremock. Jeżeli uda Ci znaleźć REST API do skonsumowania, napisz też testy Wiremock.
[#22] Chcę, żeby cały projekt można było uruchomić jedną komendą. Wykorzystaj w tym celu Docker Compose.




